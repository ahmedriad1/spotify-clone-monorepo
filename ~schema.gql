# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Album {
  _count: AlbumCount!
  artists: [Artist!]
  createdAt: DateTime
  description: String!
  genre: Genre!
  genreId: String!
  id: ID!
  imageId: String
  imageUrl: String
  likedBy: [AlbumLikes!]
  likesCount: Int!
  name: String!
  tracks: [Track!]
  tracksDuration: Float
  type: AlbumType!
  updatedAt: DateTime
}

type AlbumCount {
  artists: Int!
  likedBy: Int!
  tracks: Int!
}

type AlbumLikes {
  album: Album!
  albumId: String!
  likedAt: DateTime!
  user: User!
  userId: String!
}

input AlbumLikesListRelationFilter {
  every: AlbumLikesWhereInput
  none: AlbumLikesWhereInput
  some: AlbumLikesWhereInput
}

input AlbumLikesWhereInput {
  AND: [AlbumLikesWhereInput!]
  NOT: [AlbumLikesWhereInput!]
  OR: [AlbumLikesWhereInput!]
  album: AlbumRelationFilter
  albumId: StringFilter
  likedAt: DateTimeFilter
  user: UserRelationFilter
  userId: StringFilter
}

input AlbumListRelationFilter {
  every: AlbumWhereInput
  none: AlbumWhereInput
  some: AlbumWhereInput
}

input AlbumRelationFilter {
  is: AlbumWhereInput
  isNot: AlbumWhereInput
}

enum AlbumType {
  ALBUM
  SINGLE
}

input AlbumWhereInput {
  AND: [AlbumWhereInput!]
  NOT: [AlbumWhereInput!]
  OR: [AlbumWhereInput!]
  artists: ArtistListRelationFilter
  createdAt: DateTimeFilter
  description: StringFilter
  genre: GenreRelationFilter
  genreId: StringFilter
  id: StringFilter
  imageId: StringFilter
  likedBy: AlbumLikesListRelationFilter
  likesCount: IntFilter
  name: StringFilter
  tracks: TrackListRelationFilter
  type: EnumAlbumTypeFilter
  updatedAt: DateTimeFilter
}

input AlbumWhereUniqueInput {
  id: String
}

type Artist {
  _count: ArtistCount!
  albums: [Album!]
  id: ID!
  imageId: String
  imageUrl: String
  name: String!
  tracks: [Track!]
  user: User!
  userId: String!
}

type ArtistCount {
  albums: Int!
  tracks: Int!
}

input ArtistListRelationFilter {
  every: ArtistWhereInput
  none: ArtistWhereInput
  some: ArtistWhereInput
}

input ArtistRelationFilter {
  is: ArtistWhereInput
  isNot: ArtistWhereInput
}

input ArtistWhereInput {
  AND: [ArtistWhereInput!]
  NOT: [ArtistWhereInput!]
  OR: [ArtistWhereInput!]
  albums: AlbumListRelationFilter
  id: StringFilter
  imageId: StringFilter
  name: StringFilter
  tracks: TrackListRelationFilter
  user: UserRelationFilter
  userId: StringFilter
}

input ArtistWhereUniqueInput {
  id: String
  userId: String
}

input ArtistsConnectOrDisconnect {
  connect: [ArtistWhereUniqueInput!]
  disconnect: [ArtistWhereUniqueInput!]
}

input CreateAlbumInput {
  artists: [ArtistWhereUniqueInput!]!
  description: String!
  genre: GenreWhereUniqueInput!
  name: String!
  type: AlbumType = ALBUM
}

input CreateArtistInput {
  name: String!
  user: UserWhereUniqueInput!
}

input CreateTrackInput {
  album: AlbumWhereUniqueInput!
  artists: [ArtistWhereUniqueInput!]
  genre: GenreWhereUniqueInput!
  name: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTimeFilter
  notIn: [DateTime!]
}

input EnumAlbumTypeFilter {
  equals: AlbumType
  in: [AlbumType!]
  not: EnumAlbumTypeFilter
  notIn: [AlbumType!]
}

input FloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: FloatFilter
  notIn: [Float!]
}

type Genre {
  _count: GenreCount!
  albums: [Album!]
  createdAt: DateTime
  description: String!
  id: ID!
  name: String!
  tracks: [Track!]
  updatedAt: DateTime
}

type GenreCount {
  albums: Int!
  tracks: Int!
}

input GenreCreateInput {
  description: String!
  name: String!
}

input GenreRelationFilter {
  is: GenreWhereInput
  isNot: GenreWhereInput
}

input GenreUpdateInput {
  description: String
  name: String
}

input GenreWhereInput {
  AND: [GenreWhereInput!]
  NOT: [GenreWhereInput!]
  OR: [GenreWhereInput!]
  albums: AlbumListRelationFilter
  createdAt: DateTimeFilter
  description: StringFilter
  id: StringFilter
  name: StringFilter
  tracks: TrackListRelationFilter
  updatedAt: DateTimeFilter
}

input GenreWhereUniqueInput {
  id: String
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: IntFilter
  notIn: [Int!]
}

type LikesContain {
  id: ID!
  liked: Boolean!
}

type Mutation {
  createAlbum(data: CreateAlbumInput!, image: Upload!): Album!
  createArtist(data: CreateArtistInput!, image: Upload): Artist!
  createGenre(data: GenreCreateInput!): Genre!
  createTrack(data: CreateTrackInput!, trackFile: Upload!): Track!
  createUser(data: UserCreateInput!): UserModel!
  likeAlbum(where: AlbumWhereUniqueInput!): Album!
  likeTrack(where: TrackWhereUniqueInput!): Track!
  loginUser(data: UserLoginInput!): UserModel!
  refreshAccessToken(data: RefreshTokenInput!): UserModel!
  removeAlbum(where: AlbumWhereUniqueInput!): Album!
  removeArtist(where: ArtistWhereUniqueInput!): Artist!
  removeTrack(where: TrackWhereUniqueInput!): Track!
  unlikeAlbum(where: AlbumWhereUniqueInput!): Album!
  unlikeTrack(where: TrackWhereUniqueInput!): Track!
  updateAlbum(data: UpdateAlbumInput!, image: Upload, where: AlbumWhereUniqueInput!): Album!
  updateArtist(data: UpdateArtistInput!, image: Upload, where: ArtistWhereUniqueInput!): Artist!
  updateGenre(data: GenreUpdateInput!, where: GenreWhereUniqueInput!): Genre!
  updateTrack(data: UpdateTrackInput!, trackFile: Upload, where: TrackWhereUniqueInput!): Track!
  updateUser(data: UserUpdateInput!): UserModel!
}

type Query {
  album(where: AlbumWhereUniqueInput!): Album!
  albumLikesContain(tracks: [String!]!): [LikesContain!]!
  albums(limit: Int = 20, page: Int = 1, where: AlbumWhereInput): [Album!]!
  artist(where: ArtistWhereUniqueInput!): Artist!
  artists(limit: Int = 20, page: Int = 1, where: ArtistWhereInput): [Artist!]!
  genre(where: GenreWhereUniqueInput!): Genre!
  genres(limit: Int = 20, page: Int = 1, where: GenreWhereInput): [Genre!]!
  me: UserModel!
  totalAlbums(where: AlbumWhereInput): Float!
  totalArtists(where: ArtistWhereInput): Float!
  totalGenres(where: GenreWhereInput): Float!
  totalTracks(where: TrackWhereInput): Float!
  totalUsers(where: UserWhereInput): Float!
  track(where: TrackWhereUniqueInput!): Track!
  trackLikesContain(tracks: [String!]!): [LikesContain!]!
  tracks(limit: Int = 20, page: Int = 1, where: TrackWhereInput): [Track!]!
  user(where: UserWhereUniqueInput!): UserModel!
  users(limit: Int = 20, page: Int = 1, where: UserWhereInput): [UserModel!]!
}

input RefreshTokenInput {
  refreshToken: String!
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: StringFilter
  notIn: [String!]
  startsWith: String
}

type Track {
  _count: TrackCount!
  album: Album!
  albumId: String!
  artists: [Artist!]
  createdAt: DateTime
  duration: Float!
  genre: Genre!
  genreId: String!
  id: ID!
  likedBy: [TrackLikes!]
  likesCount: Int!
  name: String!
  trackId: String!
  trackUrl: String
  updatedAt: DateTime
}

type TrackCount {
  artists: Int!
  likedBy: Int!
}

type TrackLikes {
  likedAt: DateTime!
  track: Track!
  trackId: String!
  user: User!
  userId: String!
}

input TrackLikesListRelationFilter {
  every: TrackLikesWhereInput
  none: TrackLikesWhereInput
  some: TrackLikesWhereInput
}

input TrackLikesWhereInput {
  AND: [TrackLikesWhereInput!]
  NOT: [TrackLikesWhereInput!]
  OR: [TrackLikesWhereInput!]
  likedAt: DateTimeFilter
  track: TrackRelationFilter
  trackId: StringFilter
  user: UserRelationFilter
  userId: StringFilter
}

input TrackListRelationFilter {
  every: TrackWhereInput
  none: TrackWhereInput
  some: TrackWhereInput
}

input TrackRelationFilter {
  is: TrackWhereInput
  isNot: TrackWhereInput
}

input TrackWhereInput {
  AND: [TrackWhereInput!]
  NOT: [TrackWhereInput!]
  OR: [TrackWhereInput!]
  album: AlbumRelationFilter
  albumId: StringFilter
  artists: ArtistListRelationFilter
  createdAt: DateTimeFilter
  duration: FloatFilter
  genre: GenreRelationFilter
  genreId: StringFilter
  id: StringFilter
  likedBy: TrackLikesListRelationFilter
  likesCount: IntFilter
  name: StringFilter
  trackId: StringFilter
  updatedAt: DateTimeFilter
}

input TrackWhereUniqueInput {
  id: String
}

input UpdateAlbumInput {
  artists: ArtistsConnectOrDisconnect
  description: String
  genre: GenreWhereUniqueInput
  name: String
}

input UpdateArtistInput {
  name: String
  user: UserWhereUniqueInput
}

input UpdateTrackInput {
  album: AlbumWhereUniqueInput
  artists: [ArtistWhereUniqueInput!]
  genre: GenreWhereUniqueInput
  name: String
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type User {
  _count: UserCount!
  artist: Artist
  createdAt: DateTime
  email: String!
  id: ID!
  likedAlbums: [AlbumLikes!]
  likedTracks: [TrackLikes!]
  name: String!
  password: String!
  updatedAt: DateTime
}

type UserCount {
  likedAlbums: Int!
  likedTracks: Int!
}

input UserCreateInput {
  email: String!
  name: String!
  password: String!
}

input UserLoginInput {
  email: String!
  password: String!
}

type UserModel {
  artist: Artist
  createdAt: DateTime
  email: String!
  id: ID!
  likedAlbums: [AlbumLikes!]
  likedTracks: [TrackLikes!]
  name: String!
  refreshToken: String
  token: String
  updatedAt: DateTime
}

input UserRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

input UserUpdateInput {
  email: String
  name: String
  password: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  artist: ArtistRelationFilter
  createdAt: DateTimeFilter
  email: StringFilter
  id: StringFilter
  likedAlbums: AlbumLikesListRelationFilter
  likedTracks: TrackLikesListRelationFilter
  name: StringFilter
  password: StringFilter
  updatedAt: DateTimeFilter
}

input UserWhereUniqueInput {
  email: String
  id: String
}
